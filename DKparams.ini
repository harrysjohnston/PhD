; This need the cosmosis-standard-library branch
; sv-3x2pt for the moment.


[runtime]
sampler = minuit
root = ${COSMOSIS_SRC_DIR}

[DEFAULT]
DES_MPP_DIR = ../../
2PT_FILE = %(DES_MPP_DIR)s/SV/twopt_v0.1_y1scaledcov_fixed.fits
2PT_DATA_SETS = xip xim wtheta gammat

[minuit]
maxiter = 5000
verbose = T
save_dir = minuit_test
output_ini = minuit.ini
strategy = medium
algorithm = fallback
width_estimate = 0.05
tolerance = 100.0


[multinest]
live_points=500
tolerance=0.5
max_iterations=50000

[output]
filename=grid.txt
format=text

[test]
; These are the parameters for this sampler.
; In this case there is just one parameter
save_dir=test
fatal_errors=T

[grid]
nsample_dimension = 21
save_dir=grid_output

[emcee]
; The emcee sampler uses the concept of walkers, a collection
; ; of live points.  Sampling is done along lines that connect
; ; pairs of walkers.  The number of walkers must be at least
; ; 2*nparam + 1, but in general more than that usually works
; ; better.
burn=0.3
walkers = 16
; ; This many samples is overkill, just to make the plots
; ; look a lot nicer
samples = 400
; ; This is the interval at which convergence diagnostics
; ; are performed
nsteps = 100
;


; The pipeline section contains information
; that describes the sequence of calculations
; to be done and what we want out at the end
; Here we just specify the priors, since modules and values will be specific to each chain
[pipeline]
quiet=T
timing=F
debug=F
;priors = priors.ini
modules = consistency camb halofit growth extrapolate fits_nz photoz_bias nonlinear_linear_alignment  clerkin_bias pk_to_cl add_intrinsic  shear_m_bias  2pt_gal  2pt_gal_shear 2pt_shear 2pt_like
values = values.ini
likelihoods = 2pt
extra_output = cosmological_parameters/sigma_8

[2pt_like]
file = cosmosis-standard-library/likelihood/2pt/2pt_like.py
data_file = %(2PT_FILE)s
data_sets = %(2PT_DATA_SETS)s
;save_plots_to = buzzard_plots
gaussian_covariance=F
covmat_name=COVMAT

; cut_wtheta = 1,2  1,3  2,3
; cut_gammat = 2,1  3,1


[clerkin_bias]
file=${COSMOSIS_SRC_DIR}/cosmosis-standard-library/bias/clerkin/clerkin_interface.py
model=gtd
mode=power

[bias]
file=${COSMOSIS_SRC_DIR}/cosmosis-standard-library/bias/constant_bias/constant_bias.py

[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=2500
feedback=0

[extrapolate]
file = cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py 
kmax = 500.

[sigma8_rescale]
file = cosmosis-standard-library/utility/sample_sigma8/sigma8_rescale.py

[halofit]
file = cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so

[nonlinear_linear_alignment]
file = cosmosis-standard-library/intrinsic_alignments/la_model/linear_alignments_interface.py
method = bk_corrected

[add_intrinsic]
file=cosmosis-standard-library/shear/add_intrinsic/add_intrinsic.py
shear-shear=T
position-shear=T


; This module uses the Limber approximation to compute shear-shear C_ell
; given the shear kernel (which is derived from the number density and 
; from geometry)

[pk_to_cl]
file = cosmosis-standard-library/structure/projection/project_2d.py
ell_min = 0.1
ell_max = 200000.0
n_ell = 800
position-shear = pos-shape
shear-shear = shape-shape
position-position = pos-pos
intrinsic-intrinsic = shape-shape
;not sure which one of these is right
shear-intrinsic = shape-shape

verbose = F
get_kernel_peaks=F



[fits_nz]
file = cosmosis-standard-library/number_density/load_nz_fits/load_nz_fits.py
nz_file = %(2PT_FILE)s  ; This form means look up in the DEFAULT section at the top what DATA_FILE is
;This module looks for extensions in the fits file called, in this case, nz_lens and nz_redmagic,
;and loads them into sections with the same name
data_sets = shape  pos
;  redmagic 


;ell_max = 500.0
;spectra_to_cut= SHEAR_SHEAR GGL  REDMAGIC_CL

[2pt_shear]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
;input_section_name = shear_cl
;output_section_name = shear_xi
corr_type = 0

[2pt_gal]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
;input_section_name = galaxy_cl
;output_section_name = matter_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 1

[2pt_gal_shear]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
;input_section_name = galaxy_shear_cl
;output_section_name = ggl_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 2

[photoz_bias]
file = cosmosis-standard-library/number_density/photoz_bias/photoz_bias.py
mode = additive
sample = nz_shape
bias_section = wl_photoz_errors


[shear_m_bias]
file = cosmosis-standard-library/shear/shear_bias/shear_m_bias.py
m_per_bin = True
verbose = True

;[photoz_bias]
;file = cosmosis-standard-library/number_density/photoz_bias/photoz_bias.py
;mode = additive

[growth]
file=cosmosis-standard-library/structure/growth_factor/interface.so
zmin=0.
zmax=4.
nz=401

[extract]
file = ${PWD}/datavector.py
outfile = datavector.txt
